{% comment %} 
  Using liquid to get metadata server-side, then construct a dictionary
  where the key is the variantId and the value is an object containing 
  both productId and priceId with their respective values.
{% endcomment %}
{% capture 'meta_data' %}
  {% for variant in product.variants %}
    {{ variant.id | json }}: { 
      product_id: {{ variant.metafields.architek_health.stripe_product_id | json }},
      price_id: {{ variant.metafields.architek_health.stripe_price_id | json }}
    }
    {% unless forloop.last %},{% endunless %}
  {% endfor %}
{% endcapture %}

<a id="get-started-link" target="_blank">
  <button id="get-started-button" class="custom-button">GET STARTED</button>
</a>

<style>
  .custom-button {
    display: inline-block;
    width: 100%;
    text-align: center;
    font-weight: 600;
    padding: 15px;
    background-color: #24252F;
    color: #fff !important;
    text-decoration: none;
    border-radius: 100px;
    transition: box-shadow 0.3s ease;
  }

  .custom-button:hover {
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  }
</style>

<script>
  // PROCESSOR ID 
  const processorId = 1;
  // Assigning the liquid code of IDs above to a javascript object
  const stripeData = { {{ meta_data }} };
  // Assuming no variantId upon first loading the page, assign the variantId
  // of the currently selected or first available variant of the product
  let stripeIds = stripeData[{{ product.selected_or_first_available_variant.id | json }}];
  const variantForm = document.querySelector('div.product-variants');
  const getStartedLink = document.querySelector('#get-started-link');

  // handle initializing and updating the href
  const setArchitekUrl = () => {
    if (getStartedLink) {
      const baseUrl = "https://patient.ahco.io/trytangl/signup?";
      const searchParams = new URLSearchParams();
      searchParams.set('processorId', processorId);
      searchParams.set('productId', stripeIds.product_id);
      searchParams.set('priceId', stripeIds.price_id);
      getStartedLink.setAttribute('href', baseUrl + searchParams.toString())
    }
  }

  // helper to get a param from a url
  const extractUrlSearchParam = (url, param) => {
    const queryString = url.slice(url.lastIndexOf('?'));
    return new URLSearchParams(queryString).get(param);
  }

  // handle getting the updated variantId and setting the updated stripe IDs
  const handleUrlChange = (e) => {
    if (e?.destination?.url) {
      const variantId = extractUrlSearchParam(e.destination.url, 'variant');
      if (variantId) {
        stripeIds = stripeData[variantId];
      }
      setArchitekUrl();
    }
  }

  const handleChange = () => {
    setTimeout(() => {
      const variantId = extractUrlSearchParam(window.location.href, 'variant')
      if (variantId) {
        stripeIds = stripeData[variantId];
      }
      setArchitekUrl();
    }, 100);
  }

  // Experimental, used in newer versions of Chrome/Edge: 
  // https://developer.mozilla.org/en-US/docs/Web/API/Window/navigation#browser_compatibility
  if (window && window.navigation) {
    window.navigation.addEventListener('navigate', handleUrlChange);
  } else if (window) {
    window.addEventListener('locationchange', handleUrlChange);
  // For outdated browsers. Worked in 100% of testing, but I don't like it!
  } else if (variantForm) {
    if (variantForm) {
      const formInputs = variantForm.querySelectorAll('input.product-variant__input.product-variant-value');

      if (formInputs) {
        [...formInputs].map((ele) => ele.addEventListener('change', handleChange));
      }
    }
  }

  setArchitekUrl();
</script>
